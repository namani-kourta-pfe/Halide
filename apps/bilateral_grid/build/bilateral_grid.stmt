module name=bilateral_grid, target=x86-64-linux-avx-avx2-f16c-fma-no_runtime-sse41
external_plus_metadata func bilateral_grid (input, r_sigma, bilateral_grid) {
assert((uint64)reinterpret((halide_buffer_t *)input.buffer) != (uint64)0, halide_error_buffer_argument_is_null("input"))
assert((uint64)reinterpret((halide_buffer_t *)bilateral_grid.buffer) != (uint64)0, halide_error_buffer_argument_is_null("bilateral_grid"))
let bilateral_grid = (void *)_halide_buffer_get_host((halide_buffer_t *)bilateral_grid.buffer)
let bilateral_grid.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)bilateral_grid.buffer)
let bilateral_grid.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)bilateral_grid.buffer)
let bilateral_grid.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)bilateral_grid.buffer)
let bilateral_grid.min.0 = _halide_buffer_get_min((halide_buffer_t *)bilateral_grid.buffer, 0)
let bilateral_grid.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)bilateral_grid.buffer, 0)
let bilateral_grid.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)bilateral_grid.buffer, 0)
let bilateral_grid.min.1 = _halide_buffer_get_min((halide_buffer_t *)bilateral_grid.buffer, 1)
let bilateral_grid.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)bilateral_grid.buffer, 1)
let bilateral_grid.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)bilateral_grid.buffer, 1)
let input = (void *)_halide_buffer_get_host((halide_buffer_t *)input.buffer)
let input.type = (uint32)_halide_buffer_get_type((halide_buffer_t *)input.buffer)
let input.device_dirty = (uint1)_halide_buffer_get_device_dirty((halide_buffer_t *)input.buffer)
let input.dimensions = _halide_buffer_get_dimensions((halide_buffer_t *)input.buffer)
let input.min.0 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 0)
let input.extent.0 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 0)
let input.stride.0 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 0)
let input.min.1 = _halide_buffer_get_min((halide_buffer_t *)input.buffer, 1)
let input.extent.1 = _halide_buffer_get_extent((halide_buffer_t *)input.buffer, 1)
let input.stride.1 = _halide_buffer_get_stride((halide_buffer_t *)input.buffer, 1)
let blury.s0.z.max.s = int32(max(1.000000f/(float32)r_sigma, 0.000000f))
let blury.s0.z.min = int32(min(1.000000f/(float32)r_sigma, 0.000000f))
let input.extent.0.required = max(max(min(min(((bilateral_grid.extent.0 + bilateral_grid.min.0) + 31)/8, ((bilateral_grid.min.0/8) + (((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8)) + 10)/8)*8)) + -2)*8, (input.extent.0 + input.min.0) + 4) + -5, input.min.0) + 1, bilateral_grid.extent.0 + bilateral_grid.min.0) - min(max(min((((min(bilateral_grid.extent.0, 17) + bilateral_grid.min.0) + -33)/8)*8, (input.extent.0 + input.min.0) + 3) + -4, input.min.0), (min(bilateral_grid.extent.0, 8) + bilateral_grid.min.0) + -8)
let input.min.0.required = min(max(min((((min(bilateral_grid.extent.0, 17) + bilateral_grid.min.0) + -33)/8)*8, (input.extent.0 + input.min.0) + 3) + -4, input.min.0), (min(bilateral_grid.extent.0, 8) + bilateral_grid.min.0) + -8)
let input.extent.1.required = max(max(min(((((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8)*8) + 4, input.extent.1 + input.min.1), bilateral_grid.extent.1 + bilateral_grid.min.1), input.min.1 + 1) - min(max(min((bilateral_grid.min.1/8)*8, (input.extent.1 + input.min.1) + 19) + -20, input.min.1), bilateral_grid.min.1)
let input.min.1.required = min(max(min((bilateral_grid.min.1/8)*8, (input.extent.1 + input.min.1) + 19) + -20, input.min.1), bilateral_grid.min.1)
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bilateral_grid.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)bilateral_grid.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)bilateral_grid.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct((min(bilateral_grid.extent.0, 8) + bilateral_grid.min.0) + -8, max(bilateral_grid.extent.0, 8), 1, 0, bilateral_grid.min.1, bilateral_grid.extent.1, max(bilateral_grid.extent.0, 8), 0), (uint64)0)
}
if ((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer)) {
 (halide_buffer_t *)_halide_buffer_init((halide_buffer_t *)input.buffer, (halide_dimension_t *)_halide_buffer_get_shape((halide_buffer_t *)input.buffer), (void *)reinterpret((uint64)0), (uint64)0, (halide_device_interface_t *)reinterpret((uint64)0), 2, 32, 2, (halide_dimension_t *)make_struct(input.min.0.required, input.extent.0.required, 1, 0, input.min.1.required, input.extent.1.required, input.extent.0.required, 0), (uint64)0)
}
if (!((uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)bilateral_grid.buffer) || (uint1)_halide_buffer_is_bounds_query((halide_buffer_t *)input.buffer))) {
 assert(bilateral_grid.type == (uint32)73730, halide_error_bad_type("Output buffer bilateral_grid", bilateral_grid.type, (uint32)73730))
 assert(bilateral_grid.dimensions == 2, halide_error_bad_dimensions("Output buffer bilateral_grid", bilateral_grid.dimensions, 2))
 assert(input.type == (uint32)73730, halide_error_bad_type("Input buffer input", input.type, (uint32)73730))
 assert(input.dimensions == 2, halide_error_bad_dimensions("Input buffer input", input.dimensions, 2))
 assert(8 <= bilateral_grid.extent.0, halide_error_access_out_of_bounds("Output buffer bilateral_grid", 0, (min(bilateral_grid.extent.0, 8) + bilateral_grid.min.0) + -8, (bilateral_grid.extent.0 + bilateral_grid.min.0) + -1, bilateral_grid.min.0, (bilateral_grid.extent.0 + bilateral_grid.min.0) + -1))
 assert(0 <= bilateral_grid.extent.1, halide_error_buffer_extents_negative("Output buffer bilateral_grid", 1, bilateral_grid.extent.1))
 assert((input.min.0 <= input.min.0.required) && ((input.extent.0.required + input.min.0.required) <= (input.extent.0 + input.min.0)), halide_error_access_out_of_bounds("Input buffer input", 0, input.min.0.required, (input.extent.0.required + input.min.0.required) + -1, input.min.0, (input.extent.0 + input.min.0) + -1))
 assert(0 <= input.extent.0, halide_error_buffer_extents_negative("Input buffer input", 0, input.extent.0))
 assert((input.min.1 <= input.min.1.required) && ((input.extent.1.required + input.min.1.required) <= (input.extent.1 + input.min.1)), halide_error_access_out_of_bounds("Input buffer input", 1, input.min.1.required, (input.extent.1.required + input.min.1.required) + -1, input.min.1, (input.extent.1 + input.min.1) + -1))
 assert(0 <= input.extent.1, halide_error_buffer_extents_negative("Input buffer input", 1, input.extent.1))
 assert(bilateral_grid.stride.0 == 1, halide_error_constraint_violated("bilateral_grid.stride.0", bilateral_grid.stride.0, "1", 1))
 assert(input.stride.0 == 1, halide_error_constraint_violated("input.stride.0", input.stride.0, "1", 1))
 let bilateral_grid.total_extent.1 = int64(bilateral_grid.extent.1)*int64(bilateral_grid.extent.0)
 let input.total_extent.1 = int64(input.extent.1)*int64(input.extent.0)
 assert((uint64)abs(int64(bilateral_grid.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("bilateral_grid", (uint64)abs(int64(bilateral_grid.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("bilateral_grid", (uint64)abs(int64(bilateral_grid.extent.1)*int64(bilateral_grid.stride.1)), (uint64)2147483647))
 assert(bilateral_grid.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("bilateral_grid", bilateral_grid.total_extent.1, (int64)2147483647))
 assert((uint64)abs(int64(input.extent.0)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.0)), (uint64)2147483647))
 assert((uint64)abs(int64(input.extent.1)*int64(input.stride.1)) <= (uint64)2147483647, halide_error_buffer_allocation_too_large("input", (uint64)abs(int64(input.extent.1)*int64(input.stride.1)), (uint64)2147483647))
 assert(input.total_extent.1 <= (int64)2147483647, halide_error_buffer_extents_too_large("input", input.total_extent.1, (int64)2147483647))
 assert(!bilateral_grid.device_dirty, halide_error_device_dirty_with_no_device_support("Output buffer bilateral_grid"))
 assert(!input.device_dirty, halide_error_device_dirty_with_no_device_support("Input buffer input"))
 assert(bilateral_grid != (void *)reinterpret((uint64)0), halide_error_host_is_null("Output buffer bilateral_grid"))
 assert(input != (void *)reinterpret((uint64)0), halide_error_host_is_null("Input buffer input"))
 let blurz.y.extent_realized.s = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + 23)/8) - (bilateral_grid.min.1/8)
 let blurz.x.extent_realized.s = max(min(((bilateral_grid.extent.0 + bilateral_grid.min.0) + -33)/8, ((bilateral_grid.min.0/8) + (((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8)) + 2)/8)*8)) + -2), min(((bilateral_grid.extent.0 + bilateral_grid.min.0) + -49)/8, (bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/8)*8)) + 2) - (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -65)/8)
 let blurz.stride.2 = (blurz.x.extent_realized.s + 8)*(blurz.y.extent_realized.s + 3)
 allocate blurz[float32 * (blurz.x.extent_realized.s + 8) * (blurz.y.extent_realized.s + 3) * ((blury.s0.z.max.s - blury.s0.z.min) + 2) * 2]
 let blurz.s0.y.loop_extent.s = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + 31)/8) - (bilateral_grid.min.1/8)
 let blurz.s0.x.x.loop_extent.s = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + 23)/8) - (bilateral_grid.min.0/8)
 produce blurz {
  let blurz.s0.y.prologue = min((max(input.min.1 + 27, bilateral_grid.min.1)/8) + -2, (bilateral_grid.min.1/8) + blurz.s0.y.loop_extent.s)
  let blurz.s0.y.epilogue = min((max(max(input.min.1 + 27, bilateral_grid.min.1), (input.extent.1 + input.min.1) + 20)/8) + -2, (bilateral_grid.min.1/8) + blurz.s0.y.loop_extent.s)
  let t269 = 1.000000f/(float32)r_sigma
  let t270 = int32((min(t269, 0.000000f) + 0.500000f))
  let t271 = input.extent.0 + input.min.0
  let t272 = min(bilateral_grid.extent.0, 17) + bilateral_grid.min.0
  let t273 = blury.s0.z.max.s - blury.s0.z.min
  let t274 = ((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -65)/8
  let t275 = bilateral_grid.min.0/8
  let t276 = (blurz.s0.x.x.loop_extent.s + 10)/8
  let t277 = bilateral_grid.extent.0 + bilateral_grid.min.0
  let t278 = (t277 + -33)/8
  let t252 = max(blury.s0.z.max.s + 3, int32((max(t269, 0.000000f) + 0.500000f)))
  let t251 = min((t277 + 31)/8, ((t276*8) + t275) + -2)
  let t255 = min(((((blurz.s0.x.x.loop_extent.s + 2)/8)*8) + t275) + -2, t278)
  let t253 = min(blury.s0.z.min + -2, t270)
  let t256 = (t272 + -33)/8
  let t258 = (t271 + -4)/8
  let t250 = bilateral_grid.min.1/8
  let t267 = ((t273 + 2)*blurz.stride.2) - t274
  let t259 = (input.min.1*input.stride.1) + input.min.0
  let t268 = input.extent.1 + input.min.1
  parallel (blurz.s0.y.rebased, 0, blurz.s0.y.loop_extent.s + 2) {
   if (((blurz.s0.y.prologue + 2) <= (blurz.s0.y.rebased + t250)) && ((blurz.s0.y.rebased + t250) < (blurz.s0.y.epilogue + 2))) {
    let histogram.z.min_realized = min(min(blury.s0.z.min + -2, t253), t270)
    let histogram.z.extent_realized.s.s = max(blury.s0.z.max.s, t252)
    let histogram.x.extent_realized = max(t255 + 8, t251) - t256
    allocate histogram[float32 * histogram.x.extent_realized * 1 * ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1) * 2]
    let histogram.s0.x.loop_extent = t251 - t256
    produce histogram {
     let t280 = ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized
     let t281 = t253 - histogram.z.min_realized
     let t279 = t252 - t253
     for (histogram.s0.c, 0, 2) {
      let t282 = histogram.s0.c*t280
      for (histogram.s0.z.rebased, 0, t279 + 1) {
       let t283 = ((histogram.s0.z.rebased + t281)*histogram.x.extent_realized) + t282
       for (histogram.s0.x.rebased, 0, histogram.s0.x.loop_extent) {
        histogram[histogram.s0.x.rebased + t283] = 0.000000f
       }
      }
     }
     let histogram.s1.x.prologue = min((max(input.min.0 + 44, t272) + -33)/8, ((t272 + -33)/8) + histogram.s0.x.loop_extent)
     let histogram.s1.x.epilogue = max(min((max(input.min.0 + 44, t272) + -33)/8, ((t272 + -33)/8) + histogram.s0.x.loop_extent), min(((t272 + -41)/8) + histogram.s0.x.loop_extent, t258) + 1)
     let t286 = ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized
     let t285 = (blurz.s0.y.rebased + t250)*8
     let t284 = histogram.s1.x.prologue - t256
     for (histogram.s1.x.rebased, 0, t284) {
      let t287 = (histogram.s1.x.rebased + t256)*8
      let t288 = histogram.s1.x.rebased + t286
      for (histogram.s1.r10$y, 0, 8) {
       let t289 = (((histogram.s1.r10$y + t285) + -20)*input.stride.1) - t259
       for (histogram.s1.r10$x, 0, 8) {
        let t142.s = input[max(min(histogram.s1.r10$x + t287, t271 + 3) + -4, input.min.0) + t289]
        let t143.s = int32(((max(min(t142.s, 1.000000f), 0.000000f)*t269) + 0.500000f))
        let t236 = ((t143.s - histogram.z.min_realized)*histogram.x.extent_realized) + histogram.s1.x.rebased
        histogram[t236] = histogram[t236] + max(min(t142.s, 1.000000f), 0.000000f)
        let t144 = ((int32(((max(min(input[max(min(histogram.s1.r10$x + t287, t271 + 3) + -4, input.min.0) + t289], 1.000000f), 0.000000f)*t269) + 0.500000f)) - histogram.z.min_realized)*histogram.x.extent_realized) + t288
        histogram[t144] = histogram[t144] + 1.000000f
       }
      }
     }
     let t291 = (blurz.s0.y.rebased + t250)*8
     let t293 = ((((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized) + histogram.s1.x.prologue) - t256
     let t292 = histogram.s1.x.prologue - t256
     let t290 = histogram.s1.x.epilogue - histogram.s1.x.prologue
     for (histogram.s1.x.rebased, 0, t290) {
      let t294 = ((histogram.s1.x.prologue + histogram.s1.x.rebased)*8) - t259
      let t296 = histogram.s1.x.rebased + t293
      let t295 = histogram.s1.x.rebased + t292
      for (histogram.s1.r10$y, 0, 8) {
       let t297 = (((histogram.s1.r10$y + t291) + -20)*input.stride.1) + t294
       for (histogram.s1.r10$x, 0, 8) {
        let t145.s = input[(histogram.s1.r10$x + t297) + -4]
        let t146 = ((int32(((max(min(t145.s, 1.000000f), 0.000000f)*t269) + 0.500000f)) - histogram.z.min_realized)*histogram.x.extent_realized) + t295
        histogram[t146] = histogram[t146] + max(min(t145.s, 1.000000f), 0.000000f)
        let t147 = ((int32(((max(min(input[(histogram.s1.r10$x + t297) + -4], 1.000000f), 0.000000f)*t269) + 0.500000f)) - histogram.z.min_realized)*histogram.x.extent_realized) + t296
        histogram[t147] = histogram[t147] + 1.000000f
       }
      }
     }
     let t299 = (blurz.s0.y.rebased + t250)*8
     let t301 = ((((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized) + histogram.s1.x.epilogue) - t256
     let t298 = (histogram.s0.x.loop_extent + t256) - histogram.s1.x.epilogue
     let t300 = histogram.s1.x.epilogue - t256
     for (histogram.s1.x.rebased, 0, t298) {
      let t302 = (histogram.s1.x.epilogue + histogram.s1.x.rebased)*8
      let t304 = histogram.s1.x.rebased + t301
      let t303 = histogram.s1.x.rebased + t300
      for (histogram.s1.r10$y, 0, 8) {
       let t305 = (((histogram.s1.r10$y + t299) + -20)*input.stride.1) - t259
       for (histogram.s1.r10$x, 0, 8) {
        let t148.s = input[max(min(histogram.s1.r10$x + t302, t271 + 3) + -4, input.min.0) + t305]
        let t149 = ((int32(((max(min(t148.s, 1.000000f), 0.000000f)*t269) + 0.500000f)) - histogram.z.min_realized)*histogram.x.extent_realized) + t303
        histogram[t149] = histogram[t149] + max(min(t148.s, 1.000000f), 0.000000f)
        let t150 = ((int32(((max(min(input[max(min(histogram.s1.r10$x + t302, t271 + 3) + -4, input.min.0) + t305], 1.000000f), 0.000000f)*t269) + 0.500000f)) - histogram.z.min_realized)*histogram.x.extent_realized) + t304
        histogram[t150] = histogram[t150] + 1.000000f
       }
      }
     }
    }
    consume histogram {
     let t312 = (blurz.x.extent_realized.s + 8)*blurz.s0.y.rebased
     let t310 = (((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized) - t256
     let t309 = t312 - t274
     let t306 = blury.s0.z.min - histogram.z.min_realized
     let t311 = t267 + t312
     for (blurz.s0.x.x, 0, t276) {
      let blurz.s0.x.v2.base = min(((blurz.s0.x.x*8) + t275) + -2, t278)
      let t313 = blurz.s0.x.v2.base - t256
      let t318 = blurz.s0.x.v2.base + t311
      let t317 = blurz.s0.x.v2.base + t310
      let t316 = blurz.s0.x.v2.base + t309
      for (blurz.s0.z.rebased, 0, t273 + 2) {
       let t151 = ((blurz.s0.z.rebased + t306)*histogram.x.extent_realized) + t313
       blurz[ramp((blurz.s0.z.rebased*blurz.stride.2) + t316, 1, 8)] = histogram[ramp((histogram.x.extent_realized*2) + t151, 1, 8)] + ((histogram[ramp(histogram.x.extent_realized + t151, 1, 8)]*x8(4.000000f)) + ((histogram[ramp(t151, 1, 8)]*x8(6.000000f)) + (histogram[ramp((histogram.x.extent_realized*-2) + t151, 1, 8)] + (histogram[ramp(t151 - histogram.x.extent_realized, 1, 8)]*x8(4.000000f)))))
       let t152 = ((blurz.s0.z.rebased + t306)*histogram.x.extent_realized) + t317
       blurz[ramp((blurz.s0.z.rebased*blurz.stride.2) + t318, 1, 8)] = histogram[ramp((histogram.x.extent_realized*2) + t152, 1, 8)] + ((histogram[ramp(histogram.x.extent_realized + t152, 1, 8)]*x8(4.000000f)) + ((histogram[ramp(t152, 1, 8)]*x8(6.000000f)) + (histogram[ramp((histogram.x.extent_realized*-2) + t152, 1, 8)] + (histogram[ramp(t152 - histogram.x.extent_realized, 1, 8)]*x8(4.000000f)))))
      }
     }
    }
    free histogram
   } else {
    let histogram.z.min_realized = min(min(blury.s0.z.min + -2, t253), t270)
    let histogram.z.extent_realized.s.s = max(blury.s0.z.max.s, t252)
    let histogram.x.extent_realized = max(t255 + 8, t251) - t256
    allocate histogram[float32 * histogram.x.extent_realized * 1 * ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1) * 2]
    let histogram.s0.x.loop_extent = t251 - t256
    produce histogram {
     let t320 = ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized
     let t321 = t253 - histogram.z.min_realized
     let t319 = t252 - t253
     for (histogram.s0.c, 0, 2) {
      let t322 = histogram.s0.c*t320
      for (histogram.s0.z.rebased, 0, t319 + 1) {
       let t323 = ((histogram.s0.z.rebased + t321)*histogram.x.extent_realized) + t322
       for (histogram.s0.x.rebased, 0, histogram.s0.x.loop_extent) {
        histogram[histogram.s0.x.rebased + t323] = 0.000000f
       }
      }
     }
     let t325 = ((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized
     let t324 = (blurz.s0.y.rebased + t250)*8
     for (histogram.s1.x.rebased, 0, histogram.s0.x.loop_extent) {
      let t326 = (histogram.s1.x.rebased + t256)*8
      let t327 = histogram.s1.x.rebased + t325
      for (histogram.s1.r10$y, 0, 8) {
       let t328 = (max(min(histogram.s1.r10$y + t324, t268 + 19) + -20, input.min.1)*input.stride.1) - t259
       for (histogram.s1.r10$x, 0, 8) {
        let t153.s = input[max(min(histogram.s1.r10$x + t326, t271 + 3) + -4, input.min.0) + t328]
        let t154.s = int32(((max(min(t153.s, 1.000000f), 0.000000f)*t269) + 0.500000f))
        let t237 = ((t154.s - histogram.z.min_realized)*histogram.x.extent_realized) + histogram.s1.x.rebased
        histogram[t237] = histogram[t237] + max(min(t153.s, 1.000000f), 0.000000f)
        let t155 = ((int32(((max(min(input[max(min(histogram.s1.r10$x + t326, t271 + 3) + -4, input.min.0) + t328], 1.000000f), 0.000000f)*t269) + 0.500000f)) - histogram.z.min_realized)*histogram.x.extent_realized) + t327
        histogram[t155] = histogram[t155] + 1.000000f
       }
      }
     }
    }
    consume histogram {
     let t335 = (blurz.x.extent_realized.s + 8)*blurz.s0.y.rebased
     let t333 = (((histogram.z.extent_realized.s.s - histogram.z.min_realized) + 1)*histogram.x.extent_realized) - t256
     let t332 = t335 - t274
     let t329 = blury.s0.z.min - histogram.z.min_realized
     let t334 = t267 + t335
     for (blurz.s0.x.x, 0, t276) {
      let blurz.s0.x.v2.base = min(((blurz.s0.x.x*8) + t275) + -2, t278)
      let t336 = blurz.s0.x.v2.base - t256
      let t341 = blurz.s0.x.v2.base + t334
      let t340 = blurz.s0.x.v2.base + t333
      let t339 = blurz.s0.x.v2.base + t332
      for (blurz.s0.z.rebased, 0, t273 + 2) {
       let t156 = ((blurz.s0.z.rebased + t329)*histogram.x.extent_realized) + t336
       blurz[ramp((blurz.s0.z.rebased*blurz.stride.2) + t339, 1, 8)] = histogram[ramp((histogram.x.extent_realized*2) + t156, 1, 8)] + ((histogram[ramp(histogram.x.extent_realized + t156, 1, 8)]*x8(4.000000f)) + ((histogram[ramp(t156, 1, 8)]*x8(6.000000f)) + (histogram[ramp((histogram.x.extent_realized*-2) + t156, 1, 8)] + (histogram[ramp(t156 - histogram.x.extent_realized, 1, 8)]*x8(4.000000f)))))
       let t157 = ((blurz.s0.z.rebased + t329)*histogram.x.extent_realized) + t340
       blurz[ramp((blurz.s0.z.rebased*blurz.stride.2) + t341, 1, 8)] = histogram[ramp((histogram.x.extent_realized*2) + t157, 1, 8)] + ((histogram[ramp(histogram.x.extent_realized + t157, 1, 8)]*x8(4.000000f)) + ((histogram[ramp(t157, 1, 8)]*x8(6.000000f)) + (histogram[ramp((histogram.x.extent_realized*-2) + t157, 1, 8)] + (histogram[ramp(t157 - histogram.x.extent_realized, 1, 8)]*x8(4.000000f)))))
      }
     }
    }
    free histogram
   }
  }
 }
 let blurx.x.extent_realized.s = min(((bilateral_grid.extent.0 + bilateral_grid.min.0) + -49)/8, (bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/8)*8)) - (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -49)/8)
 let blurx.stride.2 = (blurx.x.extent_realized.s + 8)*(blurz.y.extent_realized.s + 3)
 allocate blurx[float32 * (blurx.x.extent_realized.s + 8) * (blurz.y.extent_realized.s + 3) * ((blury.s0.z.max.s - blury.s0.z.min) + 2) * 2]
 let blurx.s0.y.loop_extent.s = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + 31)/8) - (bilateral_grid.min.1/8)
 let blurx.s0.x.x.loop_extent.s = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8)
 produce blurx {
  consume blurz {
   let t354 = blury.s0.z.max.s - blury.s0.z.min
   let t355 = ((bilateral_grid.extent.0 + bilateral_grid.min.0) + -49)/8
   let t356 = t354 + 2
   let t357 = blurx.stride.2*t356
   let t358 = min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0
   let t359 = (t358 + -49)/8
   let t360 = blurz.stride.2*t356
   let t361 = (t358 + -65)/8
   let t362 = bilateral_grid.min.0/8
   let t343 = min(t355 - t362, blurx.s0.x.x.loop_extent.s)
   let t349 = blurx.s0.x.x.loop_extent.s/8
   let t351 = t355 - t359
   let t350 = t355 - t361
   let t347 = t360 - t361
   let t348 = t357 - t359
   let t352 = (t355 + t360) - t361
   let t353 = (t355 + t357) - t359
   parallel (blurx.s0.z.rebased, 0, t354 + 2) {
    let t373 = blurx.s0.z.rebased*blurx.stride.2
    let t374 = blurx.s0.z.rebased*blurz.stride.2
    let t375 = max(t343/8, -1)
    let t364 = t374 - t361
    let t365 = t373 - t359
    let t368 = t349 - t375
    let t371 = t352 + t374
    let t369 = t350 + t374
    let t366 = t347 + t374
    let t372 = t353 + t373
    let t370 = t351 + t373
    let t367 = t348 + t373
    for (blurx.s0.y.rebased, 0, blurx.s0.y.loop_extent.s + 2) {
     let t380 = (blurx.x.extent_realized.s + 8)*blurx.s0.y.rebased
     let t381 = (blurz.x.extent_realized.s + 8)*blurx.s0.y.rebased
     let t378 = t366 + t381
     let t376 = t364 + t381
     let t379 = t367 + t380
     let t377 = t365 + t380
     for (blurx.s0.x.x, 0, t375 + 1) {
      let blurx.s0.x.v5.base = (blurx.s0.x.x*8) + t362
      let t162 = blurx.s0.x.v5.base + t376
      blurx[ramp(blurx.s0.x.v5.base + t377, 1, 8)] = blurz[ramp(t162 + 2, 1, 8)] + ((blurz[ramp(t162 + 1, 1, 8)]*x8(4.000000f)) + ((blurz[ramp(t162, 1, 8)]*x8(6.000000f)) + (blurz[ramp(t162 + -2, 1, 8)] + (blurz[ramp(t162 + -1, 1, 8)]*x8(4.000000f)))))
      let t167 = blurx.s0.x.v5.base + t378
      blurx[ramp(blurx.s0.x.v5.base + t379, 1, 8)] = blurz[ramp(t167 + 2, 1, 8)] + ((blurz[ramp(t167 + 1, 1, 8)]*x8(4.000000f)) + ((blurz[ramp(t167, 1, 8)]*x8(6.000000f)) + (blurz[ramp(t167 + -2, 1, 8)] + (blurz[ramp(t167 + -1, 1, 8)]*x8(4.000000f)))))
     }
     let t386 = (blurx.x.extent_realized.s + 8)*blurx.s0.y.rebased
     let t387 = (blurz.x.extent_realized.s + 8)*blurx.s0.y.rebased
     let t384 = t371 + t387
     let t382 = t369 + t387
     let t385 = t372 + t386
     let t383 = t370 + t386
     for (blurx.s0.x.x, 0, t368) {
      blurx[ramp(t383, 1, 8)] = blurz[ramp(t382 + 2, 1, 8)] + ((blurz[ramp(t382 + 1, 1, 8)]*x8(4.000000f)) + ((blurz[ramp(t382, 1, 8)]*x8(6.000000f)) + (blurz[ramp(t382 + -2, 1, 8)] + (blurz[ramp(t382 + -1, 1, 8)]*x8(4.000000f)))))
      blurx[ramp(t385, 1, 8)] = blurz[ramp(t384 + 2, 1, 8)] + ((blurz[ramp(t384 + 1, 1, 8)]*x8(4.000000f)) + ((blurz[ramp(t384, 1, 8)]*x8(6.000000f)) + (blurz[ramp(t384 + -2, 1, 8)] + (blurz[ramp(t384 + -1, 1, 8)]*x8(4.000000f)))))
     }
    }
   }
  }
 }
 free blurz
 let blury.y.extent_realized.s = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + 7)/8) - (bilateral_grid.min.1/8)
 let blury.x.extent_realized.s = max(((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8, min(((bilateral_grid.extent.0 + bilateral_grid.min.0) + -49)/8, (bilateral_grid.min.0/8) + ((((((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8))/8)*8)) + 7) - (((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -49)/8)
 let blury.stride.2 = (blury.x.extent_realized.s + 1)*(blury.y.extent_realized.s + 1)
 allocate blury[float32 * (blury.x.extent_realized.s + 1) * (blury.y.extent_realized.s + 1) * ((blury.s0.z.max.s - blury.s0.z.min) + 2) * 2]
 let blury.s0.y.loop_extent = (((bilateral_grid.extent.1 + bilateral_grid.min.1) + 15)/8) - (bilateral_grid.min.1/8)
 let blury.s0.x.x.loop_extent.s = (((bilateral_grid.extent.0 + bilateral_grid.min.0) + 7)/8) - (bilateral_grid.min.0/8)
 produce blury {
  consume blurx {
   let t398 = blury.s0.z.max.s - blury.s0.z.min
   let t399 = ((bilateral_grid.extent.0 + bilateral_grid.min.0) + -49)/8
   let t400 = ((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -49)/8
   let t401 = t398 + 2
   let t402 = bilateral_grid.min.0/8
   let t389 = min(t399 - t402, blury.s0.x.x.loop_extent.s)
   let t396 = blury.s0.x.x.loop_extent.s/8
   let t395 = blury.stride.2*t401
   let t394 = blurx.stride.2*t401
   let t397 = t399 - t400
   parallel (blury.s0.z.rebased, 0, t398 + 2) {
    let t415 = blurx.stride.2*blury.s0.z.rebased
    let t416 = blury.s0.z.rebased*blury.stride.2
    let t417 = max(t389/8, -1)
    let t410 = t396 - t417
    let t414 = (t395 + t397) + t416
    let t412 = t397 + t416
    let t409 = t395 + t416
    let t413 = (t394 + t397) + t415
    let t411 = t397 + t415
    let t408 = t394 + t415
    for (blury.s0.y.rebased, 0, blury.s0.y.loop_extent) {
     let t424 = (blury.s0.y.rebased + 2)*(blurx.x.extent_realized.s + 8)
     let t425 = (blury.x.extent_realized.s + 1)*blury.s0.y.rebased
     let t421 = t416 + t425
     let t423 = t409 + t425
     let t418 = t415 + t424
     let t422 = t408 + t424
     for (blury.s0.x.x, 0, t417 + 1) {
      let blury.s0.x.v6.base = (blury.s0.x.x*8) + t402
      let t224 = blury.s0.x.v6.base - t400
      let t183 = t224 + t418
      blury[ramp(t224 + t421, 1, 8)] = blurx[ramp(((blurx.x.extent_realized.s*2) + t183) + 16, 1, 8)] + ((blurx[ramp((blurx.x.extent_realized.s + t183) + 8, 1, 8)]*x8(4.000000f)) + ((blurx[ramp(t183, 1, 8)]*x8(6.000000f)) + (blurx[ramp(((blurx.x.extent_realized.s*-2) + t183) + -16, 1, 8)] + (blurx[ramp((t183 - blurx.x.extent_realized.s) + -8, 1, 8)]*x8(4.000000f)))))
      let t188 = t224 + t422
      blury[ramp(t224 + t423, 1, 8)] = blurx[ramp(((blurx.x.extent_realized.s*2) + t188) + 16, 1, 8)] + ((blurx[ramp((blurx.x.extent_realized.s + t188) + 8, 1, 8)]*x8(4.000000f)) + ((blurx[ramp(t188, 1, 8)]*x8(6.000000f)) + (blurx[ramp(((blurx.x.extent_realized.s*-2) + t188) + -16, 1, 8)] + (blurx[ramp((t188 - blurx.x.extent_realized.s) + -8, 1, 8)]*x8(4.000000f)))))
     }
     let t432 = (blury.s0.y.rebased + 2)*(blurx.x.extent_realized.s + 8)
     let t433 = (blury.x.extent_realized.s + 1)*blury.s0.y.rebased
     let t431 = t414 + t433
     let t429 = t412 + t433
     let t430 = t413 + t432
     let t426 = t411 + t432
     for (blury.s0.x.x, 0, t410) {
      blury[ramp(t429, 1, 8)] = blurx[ramp(((blurx.x.extent_realized.s*2) + t426) + 16, 1, 8)] + ((blurx[ramp((blurx.x.extent_realized.s + t426) + 8, 1, 8)]*x8(4.000000f)) + ((blurx[ramp(t426, 1, 8)]*x8(6.000000f)) + (blurx[ramp(((blurx.x.extent_realized.s*-2) + t426) + -16, 1, 8)] + (blurx[ramp((t426 - blurx.x.extent_realized.s) + -8, 1, 8)]*x8(4.000000f)))))
      blury[ramp(t431, 1, 8)] = blurx[ramp(((blurx.x.extent_realized.s*2) + t430) + 16, 1, 8)] + ((blurx[ramp((blurx.x.extent_realized.s + t430) + 8, 1, 8)]*x8(4.000000f)) + ((blurx[ramp(t430, 1, 8)]*x8(6.000000f)) + (blurx[ramp(((blurx.x.extent_realized.s*-2) + t430) + -16, 1, 8)] + (blurx[ramp((t430 - blurx.x.extent_realized.s) + -8, 1, 8)]*x8(4.000000f)))))
     }
    }
   }
  }
 }
 free blurx
 produce bilateral_grid {
  consume blury {
   let t447 = bilateral_grid.extent.0 + bilateral_grid.min.0
   let t448 = blury.s0.z.max.s - blury.s0.z.min
   let t449 = bilateral_grid.min.1*bilateral_grid.stride.1
   let t450 = input.min.1*input.stride.1
   let t436 = 1.000000f/(float32)r_sigma
   let t443 = ((bilateral_grid.extent.0 % 8) + 7)/8
   let t438 = ((min(bilateral_grid.extent.0, 49) + bilateral_grid.min.0) + -49)/8
   let t434 = bilateral_grid.extent.0/8
   let t437 = bilateral_grid.min.1 % 8
   let t444 = (t447 - t450) - input.min.0
   let t435 = (bilateral_grid.min.0 - t450) - input.min.0
   let t446 = bilateral_grid.extent.0 - t449
   let t442 = 0 - t449
   let t439 = ((t448 + 3)*blury.stride.2) + blury.x.extent_realized.s
   parallel (bilateral_grid.s0.y.rebased, 0, bilateral_grid.extent.1) {
    let t458 = bilateral_grid.min.1 + bilateral_grid.s0.y.rebased
    let t455 = (t448 + 3)*blury.stride.2
    let t454 = (t448 + 2)*blury.stride.2
    let t452 = (((bilateral_grid.s0.y.rebased + t437)/8)*(blury.x.extent_realized.s + 1)) - t438
    let t451 = (input.stride.1*t458) + t435
    let t457 = (bilateral_grid.stride.1*t458) + t442
    let t453 = float32((t458 % 8))
    for (bilateral_grid.s0.x.x, 0, t434) {
     let t199 = max(min(input[ramp((bilateral_grid.s0.x.x*8) + t451, 1, 8)], x8(1.000000f)), x8(0.000000f))*x8(t436)
     let t200 = int32x8(t199)
     let t201 = (int32x8)shift_right(ramp((bilateral_grid.s0.x.x*8) + bilateral_grid.min.0, 1, 8), x8((uint32)3)) + (((t200 - x8(blury.s0.z.min))*x8(blury.stride.2)) + x8(t452))
     let t202 = float32x8((ramp(bilateral_grid.min.0, 1, 8) % x8(8)))
     let t205 = t199 - float32x8(t200)
     let t243 = blury.x.extent_realized.s + t454
     bilateral_grid[ramp((bilateral_grid.s0.x.x*8) + t457, 1, 8)] = (float32x8)lerp((float32x8)lerp((float32x8)lerp(blury[t201], blury[t201 + x8(1)], t202*x8(0.125000f)), (float32x8)lerp(blury[t201 + x8(blury.x.extent_realized.s + 1)], blury[t201 + x8(blury.x.extent_realized.s + 2)], t202*x8(0.125000f)), x8(t453*0.125000f)), (float32x8)lerp((float32x8)lerp(blury[t201 + x8(blury.stride.2)], blury[t201 + x8(blury.stride.2 + 1)], t202*x8(0.125000f)), (float32x8)lerp(blury[t201 + x8((blury.stride.2 + blury.x.extent_realized.s) + 1)], blury[t201 + x8((blury.stride.2 + blury.x.extent_realized.s) + 2)], t202*x8(0.125000f)), x8(t453*0.125000f)), t205)/(float32x8)lerp((float32x8)lerp((float32x8)lerp(blury[t201 + x8(t454)], blury[t201 + x8(t454 + 1)], t202*x8(0.125000f)), (float32x8)lerp(blury[t201 + x8(t243 + 1)], blury[t201 + x8(t243 + 2)], t202*x8(0.125000f)), x8(t453*0.125000f)), (float32x8)lerp((float32x8)lerp(blury[t201 + x8(t455)], blury[t201 + x8(t455 + 1)], t202*x8(0.125000f)), (float32x8)lerp(blury[t201 + x8(t439 + 1)], blury[t201 + x8(t439 + 2)], t202*x8(0.125000f)), x8(t453*0.125000f)), t205)
    }
    let t466 = bilateral_grid.min.1 + bilateral_grid.s0.y.rebased
    let t463 = (t448 + 3)*blury.stride.2
    let t462 = (t448 + 2)*blury.stride.2
    let t460 = (((bilateral_grid.s0.y.rebased + t437)/8)*(blury.x.extent_realized.s + 1)) - t438
    let t459 = (input.stride.1*t466) + t444
    let t465 = (bilateral_grid.stride.1*t466) + t446
    let t461 = float32((t466 % 8))
    for (bilateral_grid.s0.x.x, 0, t443) {
     let t212 = max(min(input[ramp(t459 + -8, 1, 8)], x8(1.000000f)), x8(0.000000f))*x8(t436)
     let t213 = int32x8(t212)
     let t214 = ((int32x8)shift_right(ramp(t447 + -8, 1, 8), x8((uint32)3)) + ((t213 - x8(blury.s0.z.min))*x8(blury.stride.2))) + x8(t460)
     let t215 = float32x8((ramp(t447, 1, 8) % x8(8)))
     let t218 = t212 - float32x8(t213)
     let t248 = blury.x.extent_realized.s + t462
     bilateral_grid[ramp(t465 + -8, 1, 8)] = (float32x8)lerp((float32x8)lerp((float32x8)lerp(blury[t214], blury[t214 + x8(1)], t215*x8(0.125000f)), (float32x8)lerp(blury[t214 + x8(blury.x.extent_realized.s + 1)], blury[t214 + x8(blury.x.extent_realized.s + 2)], t215*x8(0.125000f)), x8(t461*0.125000f)), (float32x8)lerp((float32x8)lerp(blury[t214 + x8(blury.stride.2)], blury[t214 + x8(blury.stride.2 + 1)], t215*x8(0.125000f)), (float32x8)lerp(blury[t214 + x8((blury.stride.2 + blury.x.extent_realized.s) + 1)], blury[t214 + x8((blury.stride.2 + blury.x.extent_realized.s) + 2)], t215*x8(0.125000f)), x8(t461*0.125000f)), t218)/(float32x8)lerp((float32x8)lerp((float32x8)lerp(blury[t214 + x8(t462)], blury[t214 + x8(t462 + 1)], t215*x8(0.125000f)), (float32x8)lerp(blury[t214 + x8(t248 + 1)], blury[t214 + x8(t248 + 2)], t215*x8(0.125000f)), x8(t461*0.125000f)), (float32x8)lerp((float32x8)lerp(blury[t214 + x8(t463)], blury[t214 + x8(t463 + 1)], t215*x8(0.125000f)), (float32x8)lerp(blury[t214 + x8(t439 + 1)], blury[t214 + x8(t439 + 2)], t215*x8(0.125000f)), x8(t461*0.125000f)), t218)
    }
   }
  }
 }
 free blury
}
}


